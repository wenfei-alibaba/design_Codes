1.使用场景：
    A、资源优化场景。
    B、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。
    C、性能和安全要求的场景。
    D、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。
    E、一个对象多个修改者的场景。
    F、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。
    G、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用。
2.实现
    我们将创建一个抽象类 Shape 和扩展了 Shape 类的实体类。
    下一步是定义类 ShapeCache，该类把 shape 对象存储在一个 Hashtable 中，并在请求的时候返回它们的克隆。
    PrototypePatternDemo 类使用 ShapeCache 类来获取 Shape 对象。

